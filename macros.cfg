#####################################################################
#    Global Variables
#####################################################################

[gcode_macro global]
variable_has_attachable_probe:      False

variable_extruder_calibration_temp: 50

variable_print_end_clean_temp:      190
variable_print_end_clean_steps:     4
variable_print_end_clean_diff:      20

variable_moving_macros_slow_fr:     2400    ; 40
variable_moving_macros_fr:          4800    ; 80
variable_moving_macros_fast_fr:     18000   ; 300

variable_retraction_fr:             1800    ; 30
variable_retraction_fast_fr:        3600    ; 60

variable_extrude_fr:                180     ; 3
variable_extrude_fast_fr:           300     ; 5

variable_safe_z_rise:               5
variable_bucket_pos_x:              45
variable_bucket_pos_y:              310
variable_bucket_pos_z:              0.2

variable_brush_pos_x:               58
variable_brush_pos_y:               310
variable_brush_pos_z:               2

gcode:
    ; Nothing

#####################################################################
#    Moving
#####################################################################
[gcode_macro _SAFE_Z]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    {% if printer.toolhead.position.z < g.safe_z_rise %}
        G1 Z{g.safe_z_rise} F{g.moving_macros_fr}
    {% endif %}

[gcode_macro CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro FRONT_LEFT]
gcode:
    {% set posx = printer.toolhead.axis_minimum.x|float + 15.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro FRONT_RIGHT]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float - 15.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro FRONT_CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro BACK_LEFT]
gcode:
    {% set posx = printer.toolhead.axis_minimum.x|float + 15.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro BACK_RIGHT]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float - 15.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro BACK_CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro CUBE_CENTER]
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
    {% set z_center = printer.toolhead.axis_maximum.z|float / 2.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{x_center} Y{y_center} Z{z_center} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro ENTER_IDLE]
gcode:
    M18

#####################################################################
#    Homing, Gantry related
#####################################################################

[gcode_macro SET_TEMP_CALIBRATION]
gcode:
    {% set EXTRUDER = params.EXTRUDER %}
    {% set BED = params.BED %}

    {% set g = printer["gcode_macro global"] %}

    {% if EXTRUDER is defined %}
        {% set EXTRUDER_TEMP = 0 if EXTRUDER == '0' else g.extruder_calibration_temp %}

        {% set MSG = "Extruder: " ~ EXTRUDER_TEMP ~ "C" %}

        M104 S{EXTRUDER_TEMP}         ; Set extruder temperature
    {% endif %}

    {% if BED is defined %}
        ; Will round current bed temperature to tens place
        {% set NEXT_BED_TEMP = ((printer.heater_bed.temperature|int // 10) + 1) * 10 %}
        {% set BED_TEMP = 0 if BED == '0' else NEXT_BED_TEMP %}

        M117 Setting temperature {MSG ~ ", " if MSG is defined else ""}Bed: {BED_TEMP}C

        M190 S{BED_TEMP}
        
        G4 P15000 ; Wait a little
    {% else %}
        M117 Setting temperature {MSG}
    {% endif %}

    {% if EXTRUDER_TEMP is defined %}
        M109 S{EXTRUDER_TEMP}    ; Wait for Extruder
    {% endif %}

[gcode_macro G28]
rename_existing: G0028
gcode:
    {% set g = printer["gcode_macro global"] %}

    STATUS_HOMING

    SET_TEMP_CALIBRATION EXTRUDER=1

    M117 Homing
    G0028 { rawparams }

    SET_TEMP_CALIBRATION EXTRUDER=0

    STATUS_READY

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: __BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:
    {% set g = printer["gcode_macro global"] %}

    STATUS_LEVELING

    SET_TEMP_CALIBRATION BED=1

    {% if g.has_attachable_probe %}
        _CheckProbe action=query
        G90
        Attach_Probe
    {% endif %}

    __BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    {% if g.has_attachable_probe %}
        Dock_Probe
    {% endif %}

    SET_TEMP_CALIBRATION BED=0

    STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: __QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set g = printer["gcode_macro global"] %}

    STATUS_LEVELING

    SET_TEMP_CALIBRATION BED=1

    {% if g.has_attachable_probe %}
        _CheckProbe action=query
        G90
        Attach_Probe
    {% endif %}

    __QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    {% if g.has_attachable_probe %}
        Dock_Probe
    {% endif %}

    SET_TEMP_CALIBRATION BED=0

    STATUS_READY

[gcode_macro PROBE_ACCURACY]
rename_existing: __PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    {% if g.has_attachable_probe %}
        _CheckProbe action=query
        G90
        Attach_Probe
    {% endif %}

    CENTER

    __PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    {% if g.has_attachable_probe %}
        Dock_Probe
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing: __PROBE_CALIBRATE
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    {% if g.has_attachable_probe %}
        { action_raise_error("PROBE_CALIBRATE disabled with attachable probe!") }
    {% else %}
        CENTER

        __PROBE_CALIBRATE {% for p in params
                %}{'%s=%s ' % (p, params[p])}{%
                endfor %}
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    G28
                                        ; will not wait for the extruder to heat up
    SET_TEMP_CALIBRATION EXTRUDER=1     ; Set the extruder temperature so the next G28
    QUAD_GANTRY_LEVEL

    G28

    BED_MESH_PROFILE LOAD=default

#####################################################################
#    Print related
#####################################################################

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(100)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(240)|int %}
    {% set CHAMBER = params.CHAMBER|default(60)|int %}
    {% set Z_OFFSET = params.Z_OFFSET %}

    {% if printer['output_pin chamberlight'].value <= 0 %}
        CHAMBERLIGHT_25
    {% endif %}

    {% if not "xyz" in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
        G32                         ; Get moving ready
    {% endif %}

    ; Apply Z offset after homing
    {% if Z_OFFSET is defined %}
        M117 Applying Z Offset
        SET_GCODE_OFFSET Z={Z_OFFSET} MOVE=1
    {% endif %}

    M104 S{EXTRUDER}                ; Set temperatures
    M140 S{BED}

    BUCKET_POSITION                 ; Position the Toolhead in the nozzle cleaning position

    M109 S{EXTRUDER}                ; Wait for temperatures
    M190 S{BED}

    PURGE_NOZZLE
    CLEAN_NOZZLE

    STATUS_PRINTING

[gcode_macro PRINT_END]
gcode:
    {% set g = printer["gcode_macro global"] %}

    M400                                 ; wait for buffer to clear
    G91                                  ; relative positioning
    G1 Z{g.safe_z_rise} F{g.moving_macros_fr}     ; move nozzle to remove stringing
    G92 E0                               ; zero the extruder
    G1 E-10.0 F{g.retraction_fr}    ; retract filament
    M106 S0                              ; Turn off fan
    TURN_OFF_HEATERS

    ; Clean nozzle on cooldown(Allow next print to start automatically, nozzle clean to home Z)
    G90                                  ; absolute positioning
    BUCKET_POSITION                      ; position the nozzle in the bucket
    M106 S120                            ; Help cooldown nozzle

    {% for i in range(g.print_end_clean_steps) %}
        {% set temp = g.print_end_clean_temp - (g.print_end_clean_diff * i) %}
        {% set next_temp = g.print_end_clean_temp - (g.print_end_clean_diff * (i + 1)) %}

        M109 S{temp}                    ; Set and wait temp
        M104 S{next_temp}               ; Preset the next temp
        CLEAN_NOZZLE
        BUCKET_POSITION
    {% endfor %}

    TURN_OFF_HEATERS
    M106 S0                             ; Turn off fan

    BACK_CENTER                         ; park nozzle at rear center
    STATUS_OFF
    CHAMBERLIGHT_OFF

[gcode_macro BUCKET_POSITION]
description: Position the Nozzle in the cleaning position
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        SAVE_GCODE_STATE NAME=bucket

        G90
        ; Only raise Z if not in position
        {% if printer.toolhead.position.x != g.bucket_pos_x or printer.toolhead.position.y != g.bucket_pos_y %}
            _SAFE_Z
        {% endif %}
        G1 X{g.bucket_pos_x} Y{g.bucket_pos_y} F{g.moving_macros_fast_fr}
        G1 Z{g.bucket_pos_z} F{g.moving_macros_fr}
        RESTORE_GCODE_STATE NAME=bucket
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
description: Clean the Nozzle in the bed brush
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        SAVE_GCODE_STATE NAME=clean

        G90
        _SAFE_Z
        G1 X{g.brush_pos_x} Y{g.brush_pos_y} F{g.moving_macros_fast_fr}
        G1 Z{g.brush_pos_z}  F{g.moving_macros_fr}
        G91

        G1 X5.167  Y-4 F{g.moving_macros_fr}
        G1 X10.333 Y4
        G1 X10.333 Y-4
        G1 X5.167  Y4
        G1 X-31.0
        G1 Y-1
        G1 X31.0
        G1 Y1
        G1 X-31.0

        G1 X5.167 Y-4
        G1 X10.333 Y4
        G1 X10.333 Y-4
        G1 X5.167 Y4
        G1 X-31.0
        G1 Y-1
        G1 X31.0
        G1 Y1
        G1 X-31.0

        G1 X5.167  Y-4
        G1 X10.333 Y4
        G1 X10.333 Y-4
        G1 X5.167  Y4
        G1 X-31.0
        G1 Y-1
        G1 X31.0
        G1 Y1
        G1 X-31.0

        _SAFE_Z

        BUCKET_POSITION

        RESTORE_GCODE_STATE NAME=clean
    {% endif %}

[gcode_macro PURGE_NOZZLE]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
      {% if not printer.extruder.temperature >= 200 %}
        { action_raise_error("Heat up nozzle first!") }
      {% else %}
        M117 Purging nozzle
        STATUS_CLEANING

        BUCKET_POSITION

        SAVE_GCODE_STATE NAME=purge

        ; Purge nozzle while moving Toolhead
        M83
        G92 E0
        G90
        G1 X{ range(3, 6) | random } E20 F{g.extrude_fr}
        G1 Z0.2 F{g.moving_macros_fr}
        G1 Y295 F{g.moving_macros_slow_fr}     ; Move nozzle to cut the purged filament
        G1 Y270 F{g.moving_macros_fr}
        G92 E0
        M117
        RESTORE_GCODE_STATE NAME=purge
      {% endif %}
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        {% if not printer.extruder.temperature >= 200 %}
            { action_raise_error("Heat up nozzle first!") }
        {% else %}
            SAVE_GCODE_STATE NAME=unload_filament

            G90
            G1 Z110 F{g.moving_macros_fr}
            FRONT_CENTER

            ; Extruder in relative mode
            M83
            G1 E10 F{g.extrude_fast_fr}     ; extrude a little to soften new filament
            M117 Unloading
            G1 E-45 F{g.retraction_fr}      ; retract filament completely
            G1 E-45 F{g.retraction_fr}      ; retract filament completely
            M117

            RESTORE_GCODE_STATE NAME=unload_filament
        {% endif %}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        {% if not printer.extruder.temperature >= 200 %}
            { action_raise_error("Heat up nozzle first!") }
        {% else %}
            SAVE_GCODE_STATE NAME=load_filament

            BUCKET_POSITION

            ; Extruder in relative mode
            M83

            M117 Get ready...
            ; Wait until operator is ready
            G4 S3

            M117 Loading
            G1 E10 F{g.extrude_fr}          ; extrude to fill the extruder
            M117 Filling Extruder
            G1 E35 F{g.extrude_fast_fr}     ; extrude to fill the extruder
            G1 E35 F{g.extrude_fast_fr}     ; ...

            PURGE_NOZZLE
            CLEAN_NOZZLE

            RESTORE_GCODE_STATE NAME=load_filament

            G1 E-1 F{g.retraction_fr}       ; Retract outside the SAVE_GCODE_STATE

            M117
        {% endif %}
    {% endif %}

#####################################################################
#    Overrides to add Status Leds
#####################################################################

[gcode_macro M84]
rename_existing: M0084
gcode:
    M0084 { rawparams }
    STATUS_OFF

[gcode_macro M18]
rename_existing: M0018
gcode:
    M0018 { rawparams }
    STATUS_OFF

[gcode_macro M109]
rename_existing: M0109
gcode:
    STATUS_HEATING
    M0109 { rawparams }

[gcode_macro M190]
rename_existing: M0190
gcode:
    STATUS_HEATING
    M0190 { rawparams }
