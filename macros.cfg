#####################################################################
#    Global Variables
#####################################################################

[gcode_macro global]
variable_extruder_calibration_temp: 150

variable_print_end_clean_temps:     200,190,180,170

variable_moving_macros_slow_fr:     2400    ; 40
variable_moving_macros_fr:          4800    ; 80
variable_moving_macros_fast_fr:     18000   ; 300

variable_retraction_fr:             1800    ; 30
variable_retraction_fast_fr:        3600    ; 60
variable_retraction_fastest_fr:     7200    ; 120

variable_extrude_fr:                180     ; 3
variable_extrude_fast_fr:           300     ; 5

variable_safe_z_rise:               5
variable_bucket_l_pos_x:            5
variable_bucket_l_pos_y:            307
variable_bucket_l_pos_z:            0.2
variable_bucket_r_pos_x:            107
variable_bucket_r_pos_y:            307
variable_bucket_r_pos_z:            0.2

variable_purge_pos_x:               45

variable_brush_pos_x:               56
variable_brush_pos_y:               307
variable_brush_pos_z:               1.6
variable_brush_width:               36
variable_brush_depth:               8

variable_retract_on_pause:          1
variable_z_rise_on_pause:           60

gcode:
    ; Nothing

#####################################################################
#    Position routines
#####################################################################
[gcode_macro _SAFE_Z]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    {% if printer.toolhead.position.z < g.safe_z_rise %}
        G1 Z{g.safe_z_rise} F{g.moving_macros_fr}
    {% endif %}

[gcode_macro M_CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_FRONT_LEFT]
gcode:
    {% set posx = printer.toolhead.axis_minimum.x|float + 15.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_FRONT_RIGHT]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float - 15.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_FRONT_CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_minimum.y|float + 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_BACK_LEFT]
gcode:
    {% set posx = printer.toolhead.axis_minimum.x|float + 15.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_BACK_RIGHT]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float - 15.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_BACK_CENTER]
gcode:
    {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set posy = printer.toolhead.axis_maximum.y|float - 15.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{posx} Y{posy} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

[gcode_macro M_CUBE_CENTER]
gcode:
    {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
    {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
    {% set z_center = printer.toolhead.axis_maximum.z|float / 2.0 %}
    SAVE_GCODE_STATE NAME=moving
    G90
    _SAFE_Z
    G1 X{x_center} Y{y_center} Z{z_center} F{printer["gcode_macro global"].moving_macros_fast_fr}
    RESTORE_GCODE_STATE NAME=moving

#####################################################################
#    Cleanup routines
#####################################################################

[gcode_macro BUCKET_POSITION]
description: Position the Nozzle in the cleaning position
gcode:
    {% set RIGHT = params.RIGHT|default(0)|int %}

    {% set g = printer["gcode_macro global"] %}
    {% set th = printer.toolhead %}

    {% if not "xyz" in th.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        SAVE_GCODE_STATE NAME=bucket

        G90
        ; Only raise Z if not in position
        {% if ( (not RIGHT and th.position.x != g.bucket_l_pos_x or th.position.y != g.bucket_l_pos_y) or 
            (RIGHT and th.position.x != g.bucket_r_pos_x or th.position.y != g.bucket_r_pos_y) ) %}
            _SAFE_Z
        {% endif %}
        {% if not RIGHT %}
            G1 X{g.bucket_l_pos_x} Y{g.bucket_l_pos_y} F{g.moving_macros_fast_fr}
            G1 Z{g.bucket_l_pos_z} F{g.moving_macros_fr}
        {% else %}
            G1 X{g.bucket_r_pos_x} Y{g.bucket_r_pos_y} F{g.moving_macros_fast_fr}
            G1 Z{g.bucket_r_pos_z} F{g.moving_macros_fr}
        {% endif %}

        RESTORE_GCODE_STATE NAME=bucket
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
description: Clean the Nozzle in the bed brush
gcode:
    {% set RIGHT = params.RIGHT|default(0)|int %}

    {% set g = printer["gcode_macro global"] %}
    {% set b_width = g.brush_width %}
    {% set b_depth = g.brush_depth %}
    {% set b_segm = g.brush_width / 6 %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        SAVE_GCODE_STATE NAME=clean

        M117 Cleaning nozzle

        G90
        _SAFE_Z
        G1 X{g.brush_pos_x + (b_width if RIGHT else 0)} Y{g.brush_pos_y} F{g.moving_macros_fast_fr}
        G1 Z{g.brush_pos_z} F{g.moving_macros_fr}

        {% set side = 1 if RIGHT else -1 %}
        {% set nside = -1 if RIGHT else 1 %}

        G91
        {% for _ in range(5) %}
            G1 X{b_segm * nside}     Y-{b_depth} F{g.moving_macros_fast_fr}
            G1 X{b_segm * 2 * nside} Y{b_depth}
            G1 X{b_segm * 2 * nside} Y-{b_depth}
            G1 X{b_segm * nside}     Y{b_depth}
            G1 X{b_width * side}
            G1 Y-{b_depth / 3.0}
            G1 X{b_width * nside}
            G1 Y{b_depth / 3.0}
            G1 X{b_width * side}
        {% endfor %}

        _SAFE_Z

        BUCKET_POSITION RIGHT={RIGHT}

        RESTORE_GCODE_STATE NAME=clean
    {% endif %}

[gcode_macro PURGE_NOZZLE]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
      { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
      {% if not printer.extruder.temperature >= 200 %}
        { action_raise_error("Heat up nozzle first!") }
      {% else %}
        M117 Purging nozzle
        STATUS_CLEANING

        BUCKET_POSITION

        SAVE_GCODE_STATE NAME=purge

        ; Purge nozzle while moving Toolhead
        M83
        G92 E0
        G90
        G1 X{g.purge_pos_x} E20 F{g.extrude_fr}
        G92 E0
        M117
        RESTORE_GCODE_STATE NAME=purge
      {% endif %}
    {% endif %}

#####################################################################
#    Print routines
#####################################################################

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(100)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(250)|int %}
    {% set CHAMBER = params.CHAMBER|default(30)|int %}
    {% set BED_MESH = params.BED_MESH %}
    {% set Z_OFFSET = params.Z_OFFSET %}

    {% if printer['output_pin chamberlight'].value <= 0 %}
        CHAMBERLIGHT VAL=.1
    {% endif %}

    M117 Profile='{BED_MESH}'

    {% if not "xyz" in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
        G32                         ; Get moving ready
    {% endif %}

    {% if BED_MESH is defined and BED_MESH|length %}
        BED_MESH_PROFILE LOAD={BED_MESH}
    {% endif %}

    M140 S{BED}                     ; Set bed temperature

    ; Apply Z offset after homing and Z Calibration
    {% if Z_OFFSET is defined %}
        M117 Applying Z Offset
        SET_GCODE_OFFSET Z_ADJUST={Z_OFFSET} MOVE=1
    {% endif %}

    M104 S{EXTRUDER}                ; Set temperatures
    M140 S{BED}

    BUCKET_POSITION RIGHT=0         ; Position the Toolhead in the nozzle cleaning position

    M117 Waiting to reach temperature

    M109 S{EXTRUDER}                ; Wait for temperatures

    PURGE_NOZZLE
    CLEAN_NOZZLE RIGHT=0

    M117 Printing
    STATUS_PRINTING

[gcode_macro PRINT_END]
gcode:
    {% set g = printer["gcode_macro global"] %}

    G91                                         ; relative positioning
    G1 Z{g.safe_z_rise} F{g.moving_macros_fr}   ; move nozzle to remove stringing
    SET_GCODE_OFFSET Z=0 MOVE=1                 ; reset Z offset
    M400                                        ; wait for buffer to clear
    G92 E0                                      ; zero the extruder
    G1 E-10.0 F{g.retraction_fast_fr}           ; retract filament
    TURN_OFF_HEATERS

    ; Clean nozzle on cooldown(Allow next print to start automatically, nozzle clean to home Z)
    G90                                         ; absolute positioning
    BUCKET_POSITION RIGHT=1                     ; position the nozzle in the bucket

    M117 Cleaning extruder
    M106 S255
    {% for temp in g.print_end_clean_temps %}
        BUCKET_POSITION RIGHT=1
        M109 S{temp}
        CLEAN_NOZZLE RIGHT=1
    {% endfor %}
    M117 Print finished

    TURN_OFF_HEATERS
    M106 S0                             ; Turn off fan

    STATUS_OFF
    CHAMBERLIGHT_OFF

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}              ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    CANCEL_PRINT_

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_
gcode:
    {% set g = printer["gcode_macro global"] %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=unklicky ENABLE=0                                         ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume

        PAUSE_

        {% if (printer.gcode_move.position.z + g.safe_z_rise) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{g.safe_z_rise} F{g.moving_macros_fr}                                        ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
        {% endif %}

        BUCKET_POSITION                                                                      ; park toolhead at bucket

        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                       ; set timeout to 3 hours

    {% endif %}

[gcode_macro RESUME]
description: RESUME the actual paused print
rename_existing: RESUME_
variable_etemp: 0
gcode:
    {% set g = printer["gcode_macro global"] %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=unklicky ENABLE=1                                         ; enable filament sensor

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}          ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                ; wait for hotend to heat back up
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                             ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)

        PURGE_NOZZLE
        CLEAN_NOZZLE RIGHT=1

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                  ; restore position
        BASE_RESUME                                                                          ; resume print
    {% endif %}

#####################################################################
#    Calibration, Homing and Gantry related
#####################################################################

[gcode_macro SET_CALIBRATION_TEMP]
gcode:
    {% set EXTRUDER = params.EXTRUDER %}
    {% set BED = params.BED %}

    {% set g = printer["gcode_macro global"] %}

    {% if EXTRUDER is defined %}
        {% set EXTRUDER_TEMP = 0 if EXTRUDER == '0' else g.extruder_calibration_temp %}

        M104 S{EXTRUDER_TEMP}         ; Set extruder temperature
    {% endif %}

    {% if BED is defined %}
        {% set NEXT_BED_TEMP = printer.heater_bed.temperature %}
        {% set BED_TEMP = 0 if BED == '0' else NEXT_BED_TEMP %}

        M190 S{BED_TEMP}

        {% if BED_TEMP > 0 %}
            ; Wait 20s the temperature become stable
            M117 Waiting 20s Bed temperature to settle({BED_TEMP}C)...
            G4 P10000
            M117 Waiting 10s Bed temperature to settle({BED_TEMP}C)...
            G4 P10000
        {% endif %}
    {% endif %}

    {% if EXTRUDER_TEMP is defined %}
        {% if EXTRUDER_TEMP > 0 %}
            M117 Setting Extruder temperature: {EXTRUDER_TEMP}C...
        {% endif %}
        M106 S255
        M109 S{EXTRUDER_TEMP}    ; Wait for Extruder
        M106 S0
    {% endif %}

[gcode_macro G28]
rename_existing: G0028
gcode:
    {% set g = printer["gcode_macro global"] %}

    STATUS_HOMING

    SET_CALIBRATION_TEMP EXTRUDER=1

    M117 Homing
    G0028 { rawparams }

    SET_CALIBRATION_TEMP EXTRUDER=0

    M117 Ready
    STATUS_READY

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_
description: Perform Mesh Bed Leveling with klicky automount
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    STATUS_LEVELING

    SET_CALIBRATION_TEMP BED=1

    M117 Bed mesh calibrating

    BED_MESH_CALIBRATE_ {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    SET_CALIBRATION_TEMP BED=0

    M117 Ready
    STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_
description: Conform a moving, twistable gantry to the shape of a stationary bed
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    STATUS_LEVELING

    SET_CALIBRATION_TEMP BED=1

    M117 Quad Gantry Leveling

    QUAD_GANTRY_LEVEL_ {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    SET_CALIBRATION_TEMP BED=0

    M117 Ready
    STATUS_READY

[gcode_macro PROBE_ACCURACY]
rename_existing: PROBE_ACCURACY_
description:Probe Z-height accuracy at bed center
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    M_CENTER

    PROBE_ACCURACY_ {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

[gcode_macro PROBE_CALIBRATE]
rename_existing: PROBE_CALIBRATE_
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    M_CENTER

    PROBE_CALIBRATE_ {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

[gcode_macro G32]
gcode:
    {% set BED_MESH = params.BED_MESH %}

    BED_MESH_CLEAR

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    SET_CALIBRATION_TEMP EXTRUDER=1     ; Set the extruder temperature so the next G28
    QUAD_GANTRY_LEVEL

    G28 Z
    _SAFE_Z

#####################################################################
#    Filament routines
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        {% if not printer.extruder.temperature >= 180 %}
            { action_raise_error("Heat up nozzle first!") }
        {% else %}
            SAVE_GCODE_STATE NAME=unload_filament

            BUCKET_POSITION

            ; Extruder in relative mode
            M83
            M117 Unloading
            G1 E-10 F{g.retraction_fastest_fr}  ; retract filament from nozzle super fast
            G1 E-10 F{g.retraction_fast_fr}     ; retract filament from nozzle
            G1 E-35 F{g.retraction_fr}          ; ...
            G1 E-35 F{g.retraction_fr}          ; retract filament completely
            M117

            RESTORE_GCODE_STATE NAME=unload_filament
        {% endif %}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not "xyz" in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% else %}
        {% if not printer.extruder.temperature >= 200 %}
            { action_raise_error("Heat up nozzle first!") }
        {% else %}
            SAVE_GCODE_STATE NAME=load_filament

            BUCKET_POSITION

            ; Extruder in relative mode
            M83

            M117 Get ready...
            ; Wait until operator is ready
            G4 S3

            M117 Loading
            G1 E10 F{g.extrude_fr}          ; extrude to fill the extruder
            M117 Replacing old filament
            G1 E35 F{g.extrude_fast_fr}     ; replacing
            G1 E35 F{g.extrude_fast_fr}     ; ...
            G1 E35 F{g.extrude_fr}          ; replacing slowly...

            PURGE_NOZZLE
            CLEAN_NOZZLE

            RESTORE_GCODE_STATE NAME=load_filament

            M117
        {% endif %}
    {% endif %}

#####################################################################
#    General and Overrides
#####################################################################

[gcode_macro ENTER_IDLE]
gcode:
    M18

[gcode_macro M84]
rename_existing: M0084
gcode:
    M0084 { rawparams }
    STATUS_OFF

[gcode_macro M18]
rename_existing: M0018
gcode:
    M0018 { rawparams }
    STATUS_OFF

[gcode_macro M109]
rename_existing: M0109
gcode:
    STATUS_HEATING
    M0109 { rawparams }

[gcode_macro M190]
rename_existing: M0190
gcode:
    STATUS_HEATING
    M0190 { rawparams }

[gcode_macro M220]
rename_existing: M00220
gcode:
    {% if params.S is defined %}
        M00220 S {params.S}
    {% else %}
        M118 Speed factor {printer.gcode_move.speed_factor * 100}%
    {% endif %}

[gcode_macro M221]
rename_existing: M00221
gcode:
    {% if params.S is defined %}
        M00221 S {params.S}
    {% else %}
        M118 Extrude factor {printer.gcode_move.extrude_factor * 100}%
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE