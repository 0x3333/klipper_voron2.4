#####################################################################
#    Global Variables
#####################################################################

[gcode_macro global]
variable_print_end_clean_temps:     200,190,180,170

variable_moving_macros_slow_fr:     2400    ; 40
variable_moving_macros_fr:          4800    ; 80
variable_moving_macros_fast_fr:     18000   ; 300

variable_retraction_fr:             1800    ; 30
variable_retraction_fast_fr:        3600    ; 60
variable_retraction_fastest_fr:     7200    ; 120

variable_extrude_fr:                180     ; 3
variable_extrude_fast_fr:           300     ; 5

variable_safe_z_rise:               5

variable_purge_pos_x:               45

variable_brush_pos_x:               56
variable_brush_pos_y:               307
variable_brush_pos_z:               1.6
variable_brush_width:               36
variable_brush_depth:               8

gcode:
    ; Nothing

[include position.cfg]
[include cleanup.cfg]
[include calibration.cfg]
[include filament.cfg]

#####################################################################
#    Print routines
#####################################################################

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|default(100)|int %}
    {% set EXTRUDER = params.EXTRUDER|default(250)|int %}
    {% set CHAMBER = params.CHAMBER|default(30)|int %}
    {% set BED_MESH = params.BED_MESH %}
    {% set Z_OFFSET = params.Z_OFFSET %}

    {% if printer['output_pin chamberlight'].value <= 0 %}
        CHAMBERLIGHT VAL=.1
    {% endif %}

    M117 Profile='{BED_MESH}'

    {% if not "xyz" in printer.toolhead.homed_axes or not printer.quad_gantry_level.applied %}
        G32                         ; Get moving ready
    {% endif %}

    {% if BED_MESH is defined and BED_MESH|length %}
        BED_MESH_PROFILE LOAD={BED_MESH}
    {% endif %}

    M140 S{BED}                     ; Set bed temperature

    ; Apply Z offset after homing and Z Calibration
    {% if Z_OFFSET is defined %}
        M117 Applying Z Offset
        SET_GCODE_OFFSET Z_ADJUST={Z_OFFSET} MOVE=1
    {% endif %}

    M104 S{EXTRUDER}                ; Set temperatures
    M140 S{BED}

    BUCKET_POSITION RIGHT=0         ; Position the Toolhead in the nozzle cleaning position

    M117 Waiting to reach temperature

    M109 S{EXTRUDER}                ; Wait for temperatures

    PURGE_NOZZLE
    CLEAN_NOZZLE RIGHT=0

    M117 Printing
    STATUS_PRINTING

[gcode_macro PRINT_END]
gcode:
    {% set g = printer["gcode_macro global"] %}
    {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
    {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
    {% set max_velocity = printer.configfile.settings.printer.max_velocity|float %}

    SET_VELOCITY_LIMIT ACCEL={max_accel} ACCEL_TO_DECEL={max_accel_to_decel}  ; Reset Acceleration and Max Velocity
    SET_VELOCITY_LIMIT VELOCITY={max_velocity}
    G91                                         ; relative positioning
    G1 Z{g.safe_z_rise} F{g.moving_macros_fr}   ; move nozzle to remove stringing
    SET_GCODE_OFFSET Z=0 MOVE=1                 ; reset Z offset
    M400                                        ; wait for buffer to clear
    G92 E0                                      ; zero the extruder
    G1 E-10.0 F{g.retraction_fast_fr}           ; retract filament
    TURN_OFF_HEATERS

    ; Clean nozzle on cooldown(Allow next print to start automatically, nozzle clean to home Z)
    G90                                         ; absolute positioning
    BUCKET_POSITION RIGHT=1                     ; position the nozzle in the bucket

    M117 Cleaning extruder
    M106 S255
    {% for temp in g.print_end_clean_temps %}
        BUCKET_POSITION RIGHT=1
        M109 S{temp}
        CLEAN_NOZZLE RIGHT=1
    {% endfor %}
    M117 Print finished

    TURN_OFF_HEATERS
    M106 S0                             ; Turn off fan

    STATUS_OFF
    CHAMBERLIGHT_OFF

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}              ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    CANCEL_PRINT_

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_
gcode:
    {% set g = printer["gcode_macro global"] %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=unklicky ENABLE=0                                         ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume

        PAUSE_

        {% if (printer.gcode_move.position.z + g.safe_z_rise) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{g.safe_z_rise} F{g.moving_macros_fr}                                        ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
        {% endif %}

        BUCKET_POSITION                                                                      ; park toolhead at bucket

        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=10800                                                       ; set timeout to 3 hours

    {% endif %}

[gcode_macro RESUME]
description: RESUME the actual paused print
rename_existing: RESUME_
variable_etemp: 0
gcode:
    {% set g = printer["gcode_macro global"] %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=unklicky ENABLE=1                                         ; enable filament sensor

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}          ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                ; wait for hotend to heat back up
        {% endif %}

        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                             ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)

        PURGE_NOZZLE
        CLEAN_NOZZLE RIGHT=1

        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                                  ; restore position
        BASE_RESUME                                                                          ; resume print
    {% endif %}

#####################################################################
#    Calibration, Homing and Gantry related
#####################################################################

[gcode_macro G28]
rename_existing: G0028
gcode:
    {% set g = printer["gcode_macro global"] %}

    STATUS_HOMING

    SET_CALIBRATION_TEMP EXTRUDER=1

    M117 Homing
    G0028 { rawparams }

    SET_CALIBRATION_TEMP EXTRUDER=0

    M117 Ready
    STATUS_READY

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_
description: Conform a moving, twistable gantry to the shape of a stationary bed
gcode:
    {% set g = printer["gcode_macro global"] %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    STATUS_LEVELING

    SET_CALIBRATION_TEMP BED=1

    M117 Quad Gantry Leveling

    QUAD_GANTRY_LEVEL_ {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}

    SET_CALIBRATION_TEMP BED=0

    M117 Ready
    STATUS_READY

[gcode_macro G32]
gcode:
    {% set BED_MESH = params.BED_MESH %}

    BED_MESH_CLEAR

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}

    SET_CALIBRATION_TEMP EXTRUDER=1     ; Set the extruder temperature so the next G28
    QUAD_GANTRY_LEVEL

    G28 Z
    _SAFE_Z

[gcode_macro HEAT_SOAK]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    M_BACK_CENTER
    M106 S255
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=80
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150

#####################################################################
#    General and Overrides
#####################################################################

[gcode_macro ENTER_IDLE]
gcode:
    M18

[gcode_macro M84]
rename_existing: M0084
gcode:
    M0084 { rawparams }
    STATUS_OFF

[gcode_macro M18]
rename_existing: M0018
gcode:
    M0018 { rawparams }
    STATUS_OFF

[gcode_macro M109]
rename_existing: M0109
gcode:
    STATUS_HEATING
    M0109 { rawparams }

[gcode_macro M190]
rename_existing: M0190
gcode:
    STATUS_HEATING
    M0190 { rawparams }

[gcode_macro M220]
rename_existing: M00220
gcode:
    {% if params.S is defined %}
        M00220 S {params.S}
    {% else %}
        M118 Speed factor {printer.gcode_move.speed_factor * 100}%
    {% endif %}

[gcode_macro M221]
rename_existing: M00221
gcode:
    {% if params.S is defined %}
        M00221 S {params.S}
    {% else %}
        M118 Extrude factor {printer.gcode_move.extrude_factor * 100}%
    {% endif %}

[gcode_macro M600]
gcode:
    PAUSE

[gcode_macro M900]
gcode:
      SET_PRESSURE_ADVANCE ADVANCE={params.K}

[gcode_macro M204]
rename_existing: M00204
gcode:
  {% set f = params.F|default(1.0)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}
