[gcode_macro _Probe_Variables]
variable_docklocation_x:        257     ; X Dock position
variable_docklocation_y:        310     ; Y Dock position
variable_docklocation_z:        7.7     ; Z dock position (-128 for a gantry/frame mount)

variable_fr:                    8000

variable_attach_hop_y:         -20      ; How much to go away in Y to avoid colision with the dock
Variable_attachmove_y:         -20
Variable_attachmove_z:          3

variable_dock_hop_z:            10      ; How much to go away in Z to avoid colision of the probe
variable_dockmove_x:           -30
variable_dockmove_y:           -20
variable_dockmove_z:            4

variable_probe_attached:        False
variable_probe_state:           False
gcode:
    ; Nothing

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
    QUERY_PROBE
    _SetProbeState action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    # If triggered (true), probe not attached
    {% if query_probe_triggered %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
    {% else %}
        # If not triggered (false), probe attached
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If probe fails to attach/detach

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

######################
# Attach Probe Routine
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    {% set global = printer["gcode_macro global"] %}

    {% if not global.has_attachable_probe %}
        { action_raise_error("Machine without Attacheable probe!") }
    {% endif %}

    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}

    {% set fr = printer["gcode_macro _Probe_Variables"].fr %}

    {% set docklocation_x = printer["gcode_macro _Probe_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _Probe_Variables"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _Probe_Variables"].docklocation_z %}

    {% set attach_hop_y = printer["gcode_macro _Probe_Variables"].attach_hop_y %}

    {% set attachmove_y = printer["gcode_macro _Probe_Variables"].attachmove_y %}
    {% set attachmove_z = printer["gcode_macro _Probe_Variables"].attachmove_z %}

    # If x and y are not homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Please home first!") }

    # If probe not attached
    {% elif not probe_attached %}
        M117 Attaching Probe

        # Probe Attach
        G91
        G0 Y{attach_hop_y} F{fr}
        G90
        G0 X{docklocation_x} Y{docklocation_y + attachmove_y} Z{docklocation_z + attachmove_z} F{fr}
        G0 Y{docklocation_y}
        G0 Z{docklocation_z}
        G0 Y{docklocation_y + attachmove_y}

        _CheckProbe action=attach

    {% else %}
        {% if verbose %}
            M117 Probe already attached!
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% endif %}

######################
# Dock Probe Routine
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    {% set global = printer["gcode_macro global"] %}

    {% if not global.has_attachable_probe %}
        { action_raise_error("Machine without Attacheable probe!") }
    {% endif %}

    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}

    {% set fr = printer["gcode_macro _Probe_Variables"].fr %}

    {% set docklocation_x = printer["gcode_macro _Probe_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _Probe_Variables"].docklocation_y %}
    {% set docklocation_z = printer["gcode_macro _Probe_Variables"].docklocation_z %}

    {% set dock_hop_z = printer["gcode_macro _Probe_Variables"].dock_hop_z %}

    {% set attachmove_y = printer["gcode_macro _Probe_Variables"].attachmove_y %}
    {% set attachmove_z = printer["gcode_macro _Probe_Variables"].attachmove_z %}

    {% set dockmove_x = printer["gcode_macro _Probe_Variables"].dockmove_x %}
    {% set dockmove_y = printer["gcode_macro _Probe_Variables"].dockmove_y %}
    {% set dockmove_z = printer["gcode_macro _Probe_Variables"].dockmove_z %}

    # If x and y are not homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Please home first!") }

    # If probe attached
    {% elif probe_attached %}
        M117 Docking Probe

        # Probe Dock
        G91
        G0 Z{dock_hop_z} F{fr}
        G90
        G0 X{docklocation_x} Y{docklocation_y + dockmove_y} F{fr}
        G0 Z{docklocation_z} F{fr}
        G0 Y{docklocation_y}
        G0 X{docklocation_x - 10}
        G0 Z{docklocation_z + dockmove_z}
        G0 X{docklocation_x + dockmove_x}
        M400

        _CheckProbe action=dock

    {% else %}
        M117 Probe already docked

        # Probe docked, do nothing
        _CheckProbe action=query

    {% endif %}
